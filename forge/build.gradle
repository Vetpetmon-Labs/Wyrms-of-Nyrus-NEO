plugins {
    id 'com.github.johnrengelman.shadow'
}

def generatedResources = file("src/generated")

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

loom {
//    accessWidenerPath.set(project(":Common").loom.accessWidenerPath)

    forge {
        mixinConfig "wyrms.mixins.json"
//        extraAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "wyrms"
            programArgs "--output", file("src/main/generated/resources").absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}


sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven { url "https://maven.azuredoom.com/mods" }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven { url "https://dl.cloudsmith.io/public/tslat/sbl/maven/" }
    maven { url 'https://api.modrinth.com/maven' }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-1.20.1:${project.sbl_version}"
    modImplementation "mod.azure.azurelib:azurelib-neo-1.20.1:${azurelib_version}"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
